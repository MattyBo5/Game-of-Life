Summary:
  An implementation of Conway's Game of Life, an evolving computational state system or cellular
	automaton. The "game" allows the user to specify the board dimensions and the initial state of
	the cells. Then, the game engine takes over and uses simple rules to evolve the game, sometimes
	creating really cool patterns. The game is written in C++ and contains a separation between the
	game engine and the game logic.

Collaborators:
	Igor Janjic - Developed all of the game logic as well as experimental functionality.
	Matt Bollinger - Developed the GUI and integrated the logic into it.

Github Location:
	<https://github.com/zergler/Game-of-Life>

To run:
	Enter the following commands to download the necessary packages needed to run this application:
	sudo apt-get install libqt4-dev qt4-qmake cmake r-base-dev

	To compile enter the following commands:
	qmake -project
	qmake
	make

	An executable will be created and all you need to do is run:
	Game-of-Life

	It also may be possible to move into the directory qtPart and simple run the executable qtPart.
Learning Resources:
	- Game engine creation: <http://www.gamedev.net/>
		* Specifically Richard Fine's "Enginuity" series on game engine design.
	- OpenGL documentation: <http://www.opengl.org/>
	- Miscellaneous: <http://stackoverflow.com/>

Game Structure:
	The game is structured to be as robust as possible with the actual game implementation separated
	from the game engine so that the game engine can be reused in the future. Tried to organize the
	git commits so that they were done in chunks rather than small, individual publications.

Completed Goals:
	- Memory management system is pretty much completed.
	- Smart pointers are currently completely written although I might add math operations as well.
	- Game logic is partly done. We just need to integrate it into the game engine

Goals:
	- Engine:
		* Create an error logger system
		* Create a custom kernel
		* Create a custom task manager.
		* Create a settings manager that can easily talk to the QT user interface.
	- GUI:
		* Develop a user interface in QT.
	- Graphics:
		* Write the graphics for the game in OpenGL.

Hopeless Goals:
	- Adding sound, complex animations, and other cool stuff.
